---
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION, KEYWORDS, OG_IMAGE } from "../consts";
import "@fontsource-variable/montserrat";
import "@fontsource/merriweather";
import "@fontsource-variable/quicksand";
import "@fontsource-variable/pathway-extreme";
import Navbar from "../components/Navbar";
const { pathname } = Astro.url;
const { siteTitle, siteDescription, keywords, oImage } = Astro.props;
import ChatWidget from "../components/ChatWidget.astro";
import Banner from "../components/Banner.astro";
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <BaseHead
      title={siteTitle || SITE_TITLE}
      description={siteDescription || SITE_DESCRIPTION}
      keywords={keywords || KEYWORDS}
      image={oImage || OG_IMAGE}
    />
    <!-- Resource Hints -->
    <link rel="dns-prefetch" href="https://www.googletagmanager.com" />
    <link rel="preconnect" href="https://www.googletagmanager.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Core Web Vitals optimization -->
    <script type="module">
      document.addEventListener("DOMContentLoaded", () => {
        // Largest Contentful Paint optimization
        const observer = new PerformanceObserver((entryList) => {
          for (const entry of entryList.getEntries()) {
            console.log("LCP candidate:", entry.startTime, entry);
          }
        });
        observer.observe({ type: "largest-contentful-paint", buffered: true });
      });
    </script>
    <style>
      /* Modal styles */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
      }

      .modal-content {
        margin: 15% auto;
        padding: 1rem;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
        min-height: 30%;
        border-radius: 5px;
        text-align: center;
      }

      .close-modal {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }

      .close-modal:hover,
      .close-modal:focus {
        color: black;
        text-decoration: none;
      }
    </style>
  </head>
  <body class="font-sans">
    <!-- Google Tag Manager (noscript) -->
    <noscript
      ><iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-TSLDH43P"
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript
    >
    <!-- End Google Tag Manager (noscript) -->
    <!-- Notice Modal -->
    <div id="noticeModal" class="modal bg-black/60">
      <div
        class="modal-content flex flex-col justify-center items-center relative mx-auto mt-20 w-full max-w-lg rounded-lg bg-white/90 p-5 shadow-lg"
      >
        <span class="close-modal absolute right-1 top-1">&times;</span>
        <h2 class="mb-5 text-4xl font-bold text-accent-500 uppercase">
          Notice
        </h2>
        <p class="capitalize text-lg font-semibold text-gray-700">
          We are sorry to inform you that the company is no longer in operation.
        </p>
      </div>
    </div>

    <Banner />
    <Navbar pathname={pathname} client:load />
    <main>
      <slot />
    </main>
    <Footer />
    <ChatWidget />

    <!-- Deferred and async loading of non-critical resources -->
    <script>
      // Add deferred loading for non-critical resources
      window.addEventListener("load", () => {
        // Load any deferred scripts or styles here
        const deferredScripts = document.querySelectorAll(
          "script[data-deferred]"
        );
        deferredScripts.forEach((script) => {
          if (script.parentNode) {
            const newScript = document.createElement("script");
            [...script.attributes].forEach((attr) => {
              if (attr.name !== "data-deferred") {
                newScript.setAttribute(attr.name, attr.value);
              }
            });
            newScript.textContent = script.textContent;
            script.parentNode.replaceChild(newScript, script);
          }
        });

        // Modal script
        setTimeout(() => {
          const modal = document.getElementById("noticeModal");
          if (modal) {
            modal.style.display = "block";
            document.body.style.overflow = "hidden"; // Prevent background scrolling
          }
        }, 2700); // Show after 3 seconds

        // Add close functionality to modal
        const closeBtn = document.querySelector(".close-modal");
        if (closeBtn) {
          closeBtn.addEventListener("click", () => {
            const modal = document.getElementById("noticeModal");
            if (modal) {
              modal.style.display = "none";
              document.body.style.overflow = "auto"; // Restore background scrolling
            }
          });
        }

        // Close modal when clicking outside
        window.addEventListener("click", (event) => {
          const modal = document.getElementById("noticeModal");
          if (modal !== null && event.target === modal) {
            modal.style.display = "none";
            document.body.style.overflow = "auto"; // Restore background scrolling
          }
        });
      });
    </script>
  </body>
</html>
